kind: pipeline
name: x64-quicktests

platform:
  os: linux
  arch: amd64

steps:
- name: quicktests
  image: gcc:8
  commands: [ make quicktests ]
---
kind: pipeline
name: x64-checkperf

platform:
  os: linux
  arch: amd64

steps:
- name: checkperf
  image: gcc:8
  environment:
    CHECKPERF_REPOSITORY: https://github.com/lemire/simdjson
  commands: [ cat /proc/cpuinfo, make checkperf ]
---
kind: pipeline
name: x64-build

platform:
  os: linux
  arch: amd64

steps:
- name: build
  image: gcc:8
  commands: [ make, make amalgamate ]
---
kind: pipeline
name: x64-slowtests

platform:
  os: linux
  arch: amd64

steps:
- name: slowtests
  image: gcc:8
  commands: [ make slowtests ]
---
kind: pipeline
name: arm64-quicktests

platform:
  os: linux
  arch: arm64

steps:
- name: quicktests
  image: gcc:8
  commands: [ make quicktests ]
---
kind: pipeline
name: arm64-checkperf

platform:
  os: linux
  arch: arm64

steps:
- name: checkperf
  image: gcc:8
  environment:
    CHECKPERF_REPOSITORY: https://github.com/lemire/simdjson
  commands: [ cat /proc/cpuinfo, make checkperf ]
---
kind: pipeline
name: arm64-build

platform:
  os: linux
  arch: arm64

steps:
- name: build
  image: gcc:8
  commands: [ make, make amalgamate ]
---
kind: pipeline
name: arm64-slowtests

platform:
  os: linux
  arch: arm64

steps:
- name: slowtests
  image: gcc:8
  commands: [ make slowtests ]
---
kind: pipeline
name: stylecheck

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: ubuntu:18.04
  commands:
    - apt-get update -y
    - apt-get install -y python clang-format
    - ./style/run-clang-format.py -r include/ benchmark/ src/ tests/
---
kind: pipeline
name: amd64_clang_cmake_dynamic

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: ubuntu:18.04
  environment:
    CC: clang
    CXX: clang++
  commands:
    - apt-get update -qq
    - apt-get install -y clang make cmake
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_BUILD_STATIC=OFF $CMAKE_FLAGS ..
    - make -j
    - ctest --output-on-failure
---
kind: pipeline
name: amd64_clang_cmake_static

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: ubuntu:18.04
  environment:
    CC: clang
    CXX: clang++
  commands:
    - apt-get update -qq
    - apt-get install -y clang make cmake
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_BUILD_STATIC=ON $CMAKE_FLAGS ..
    - make -j
    - ctest --output-on-failure
---
kind: pipeline
name: amd64_gcc_cmake_static

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: gcc:7
  environment:
    CC: gcc
    CXX: g++
  commands:
    - apt-get update -qq
    - apt-get install -y cmake 
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_BUILD_STATIC=ON $CMAKE_FLAGS ..
    - make -j
    - ctest --output-on-failure
---
kind: pipeline
name: amd64_gcc_cmake_dynamic

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: gcc:7
  environment:
    CC: gcc
    CXX: g++
  commands:
    - apt-get update -qq
    - apt-get install -y cmake
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_BUILD_STATIC=OFF $CMAKE_FLAGS ..
    - make -j
    - ctest --output-on-failure
---
kind: pipeline
name: arm64_clang_cmake_dynamic

platform:
  os: linux
  arch: arm64

steps:
- name: Build and Test
  image: ubuntu:18.04
  environment:
    CC: clang
    CXX: clang++
  commands:
    - apt-get update -qq
    - apt-get install -y clang make cmake
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_BUILD_STATIC=OFF $CMAKE_FLAGS ..
    - make -j
    - ctest --output-on-failure
---
kind: pipeline
name: arm64_gcc_cmake_dynamic

platform:
  os: linux
  arch: arm64

steps:
- name: Build and Test
  image: gcc:7
  environment:
    CC: gcc
    CXX: g++
  commands:
    - apt-get update -qq
    - apt-get install -y cmake
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_BUILD_STATIC=OFF $CMAKE_FLAGS ..
    - make -j
    - ctest --output-on-failure
---
kind: pipeline
name: arm64_clang_cmake_static

platform:
  os: linux
  arch: arm64

steps:
- name: Build and Test
  image: ubuntu:18.04
  environment:
    CC: clang
    CXX: clang++
  commands:
    - apt-get update -qq
    - apt-get install -y clang make cmake
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_BUILD_STATIC=ON $CMAKE_FLAGS ..
    - make -j
    - ctest --output-on-failure
---
kind: pipeline
name: arm64_gcc_cmake_static

platform:
  os: linux
  arch: arm64

steps:
- name: Build and Test
  image: gcc:7
  environment:
    CC: gcc
    CXX: g++
  commands:
    - apt-get update -qq
    - apt-get install -y cmake
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_BUILD_STATIC=ON $CMAKE_FLAGS ..
    - make -j
    - ctest --output-on-failure

---
kind: pipeline
name: arm64_clang_cmake_sanitize

platform:
  os: linux
  arch: arm64

steps:
- name: Build and Test
  image: ubuntu:18.04
  environment:
    CC: clang
    CXX: clang++
  commands:
    - apt-get update -qq
    - apt-get install -y clang make cmake
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_SANITIZE=ON $CMAKE_FLAGS ..
    - make -j
    - ASAN_OPTIONS="detect_leaks=0" ctest --output-on-failure
---
kind: pipeline
name: arm64_gcc_cmake_sanitize

platform:
  os: linux
  arch: arm64

steps:
- name: Build and Test
  image: gcc:7
  environment:
    CC: gcc
    CXX: g++
  commands:
    - apt-get update -qq
    - apt-get install -y cmake
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_SANITIZE=ON $CMAKE_FLAGS ..
    - make -j
    - ASAN_OPTIONS="detect_leaks=0" ctest --output-on-failure

---
kind: pipeline
name: amd64_clang_cmake_sanitize

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: ubuntu:18.04
  environment:
    CC: clang
    CXX: clang++
  commands:
    - apt-get update -y
    - apt-get install -y make $CC g++ cmake 
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_SANITIZE=ON $CMAKE_FLAGS ..
    - make -j
    - ASAN_OPTIONS="detect_leaks=0" ctest --output-on-failure
---
kind: pipeline
name: amd64_gcc_cmake_sanitize

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: gcc:7
  environment:
    CC: gcc
    CXX: g++
  commands:
    - apt-get update -qq
    - apt-get install -y cmake
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_SANITIZE=ON $CMAKE_FLAGS ..
    - make -j
    - ASAN_OPTIONS="detect_leaks=0" ctest --output-on-failure

---
kind: pipeline
name: amd64_clang_cmake_sanitize_noavx

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: ubuntu:18.04
  environment:
    CC: clang
    CXX: clang++
  commands:
    - apt-get update -qq
    - apt-get install -y clang make cmake
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_SANITIZE=ON  -DSIMDJSON_DISABLE_AVX=ON $CMAKE_FLAGS ..
    - make -j
    - ASAN_OPTIONS="detect_leaks=0" ctest --output-on-failure
---
kind: pipeline
name: amd64_gcc_cmake_sanitize_noavx

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  image: gcc:7
  environment:
    CC: gcc
    CXX: g++
  commands:
    - apt-get update -qq
    - apt-get install -y cmake
    - $CC --version
    - mkdir build && cd build
    - cmake -DSIMDJSON_SANITIZE=ON -DSIMDJSON_DISABLE_AVX=ON $CMAKE_FLAGS ..
    - make -j
    - ASAN_OPTIONS="detect_leaks=0" ctest --output-on-failure
